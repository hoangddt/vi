<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[HOÀNG]]></title>
  <link href="http://hoangddt.net/vi/atom.xml" rel="self"/>
  <link href="http://hoangddt.net/vi/"/>
  <updated>2015-04-26T16:33:36+07:00</updated>
  <id>http://hoangddt.net/vi/</id>
  <author>
    <name><![CDATA[hoangddt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[English Article]]></title>
    <link href="http://hoangddt.net/vi/blog/2015/04/english-article/"/>
    <updated>2015-04-26T16:32:51+07:00</updated>
    <id>http://hoangddt.net/vi/blog/2015/04/english-article</id>
    <content type="html"><![CDATA[<p>When building a game, often there is much more to it than simply building the game mechanics.</p>

<p>There are many different types of games that can easily be built with a framework of choice. From tic-tac-toe to Magic The Gathering, there are a ton of different games that can be built with Angular. Card games, trivia games, board games, mobile hide-and-seek, etc. can be built using raw, unoptimized AngularJS.</p>

<p>Think about the last time you were in an Applebee’s (a chain restaurant popular in the US) and there was an interactive trivia game on the different TVs. Using a single-page-app (SPA), it can be built in an afternoon. With CSS3/HTML5, we don’t even need fancy animation libraries as 2D and 3D can be performed using only native web elements.</p>

<p>For instance, to run a 3D wipe of an element, we can apply CSS3 to it. Then, when we are ready for the element to transition, we can simply apply the CSS class.</p>

<p>What about building DOM-heavy games? Isn’t Angular really poor at handling LOTS of run-time DOM manipulations? It can be. Due to the way Angular 1.x runs, it has it’s own event handler, which adds overhead to the DOM and building any heavy pixel-heavy games can be painful. Because of the extra event loop, building a DOM-manipulation-based game in only Angular may not be the best approach.</p>

<p>However, there are many other components to building a game, for instance, most (if not all) games have scoreboards. There are HUDS (heads up displays), chat messages, event feeds, multiplayer stats, high scoreboards. How about game invitations, providing a pay-wall to guarentee a player has access to play premium content?</p>

<p>These are all elements that game libraries are not optimized to provide and can be tricky &amp; complex to build. On the other hand, web application libraries such as angular are great at building these components.</p>

<p>While game libraries are great at handling physics, animation, and sounds, we’ll use angular to power the container.</p>

<p>In today’s post, we are looking at how to build the eco-system of a game using angular as the vehicle to deliver the game content, node/express to power the game’s back-end, phaser.io and socket.io to connect the two in real-time.</p>

<p>The game flow looks like the following:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Khảo Sát Năm 2015 Của Stack Overflow]]></title>
    <link href="http://hoangddt.net/vi/blog/2015/04/stack-overflow-survey/"/>
    <updated>2015-04-21T00:17:50+07:00</updated>
    <id>http://hoangddt.net/vi/blog/2015/04/stack-overflow-survey</id>
    <content type="html"><![CDATA[<h1 id="kho-st-nm-2015-ca-stack-overflow">Khảo sát năm 2015 của Stack Overflow</h1>

<p>Nếu bạn đang đọc bài này, có lẽ bạn là một nam developer khoảng hơn 20 tuổi. Bạn tự học lập trình bằng một máy tính chạy Windows và Notepad++. Bạn sử dụng Git và Javascript thường xuyên và uống 2 ly cà phê một ngày.
Đó là <strong>hồ sơ</strong> chung của trung bình các developer Stack Overflow sau cuộc khảo sát <a href="http://stackoverflow.com/research/developer-survey-2015">năm 2015</a> của Stack Overflow. Hãy nhìn vào cuộc khảo sát này rõ hơn.</p>

<h2 id="developers-developers-ton-l-developer">Developers, Developers, toàn là developer</h2>
<p>Có bao nhiêu developer trên đất nước của bạn? Số lượng cao nhất là 39.8 devs trên 1000 người ở Luxembourg, tiếp theo là IceLand và Sweden với con số 35. Trong khi Somalia, Chad và Triều Tiên là thấp nhất.</p>

<p>Số tuổi trung bình các developer là khoảng 28.9 tuổi, có xu hướng gìa hơn một chút ở các nước phương Tây và trẻ hơn ở những nước đang phát triển: 31.6 ở Mỹ so với 25 ở Ấn Độ. Và thật chán rằng 92.1% dev là nam.</p>

<h2 id="cc-k-nng-v-kinh-nghim">Các kỹ năng và kinh nghiệm</h2>
<p>Khoảng một phần ba dev có kinh nghiệm từ 2 đến 5 năm. Một phần tư người khảo sát trên 11 năm kinh nghiệm.
Hầu hết các dev nữ có ít hơn 2 năm kinh nghiệm.</p>

<p>Bạn đã học lập trình như thế nào? 42% các developer là tự học, số còn lại là học từ trường học hoặc là học việc. Và tốt nhất là chúng ta nên tự học. Cú pháp và các kỹ thuật có thể được mô tả nhưng ta chỉ có thể học lập trình chỉ khi ta …lập trình.
Nó bị phản ánh ngược lại với các thống kê tiếp theo: 70% trong chúng ta dành ít nhất 2 giờ một tuần để lập trình cho những sở thích hoặc là các dự án cá nhân. Các dev tốt nhất yêu thích việc phát triển: họ muốn làm điều đó ngay cả khi họ đang làm việc trong một ngành công nghiệp khác.</p>

<h2 id="cng-vic">Công việc</h2>
<p>Các ngành mà chúng ta làm việc:</p>

<ul>
  <li>25% là phát triển phần mềm</li>
  <li>17% phát triển web</li>
  <li>8% làm về ngân hàng</li>
  <li>7% làm cố vấn</li>
  <li>7% làm trong các ngành giair trí/game</li>
  <li>5% dạy học</li>
  <li>4% làm viễn thông</li>
  <li>3% làm việc cho nhà nước</li>
</ul>

<p>Và một con số lớn là 20% làm “trong nhành khác”. Chúng ta may mắn rằng CNTT áp dụng hầu hết trên tất cả các lĩnh vực. Tôi cũng đang suy nghĩ xem có ngành công nghiệp nào mà không cần ứng dụng CNTT không!
Hai phần ba mọi người đều là nhân viên chính thức, 9% là làm việc tự do, và 16% là học sinh sử dụng Stack Overflow để ăn gian trên các project của họ.</p>

<p>Bạn sẽ rất vui khi biết chúng ta sẽ được trả nhiều tiền so với các việc khác. Mức lương trung bình là 99,000$ ở Mỹ, 60,000$ ở tây ÂU, 25,000$ ở đông Âu. Khi so sánh với mức sống, thì nơi tốt nhất để làm việc là … Ukraine!</p>

<p>29% mọi người làm việc từ xa một số thời gian và 50% nói rằng nó rất quan trọng. Những người làm việc từ xa kiếm được hơn nhiều hơn 14% mức lương trung bình trong khi nhân viên văn phòng có thu nhập dưới 20%. Một phần có thể giải thích rằng các freelancer nhận mức lương theo giờ cao hơn nhưng không được hưởng những lợi ích khác như nghỉ phép, nghỉ ốm, lương hưu và những bổng lộc khác.</p>

<p>Những người có danh tiếng trên Stack Overflow có thể kiếm nhiêuf hơn đến 35%. Tôi cũng không thể hiểu vì sao mà họ có thể quản lý để trả lời nhiều câu hỏi và cùng làm 1 việc toàn thời gian.</p>

<h2 id="s-hi-lng-trong-cng-vic">Sự hài lòng trong công việc</h2>

<p>76% trong chúng ta hài lòng hoặc yêu thích công việc mình đang làm. Những nhà lập trình ứng dụng di động ở Iran và Hà Lan là hạnh phúc nhất!</p>

<p>11% không hài lòng hoặc ghét công việc đó. Đau khổ nhất là các nhà quản lý sản phẩm, các chuyên gia lưu trữ, quản lý dữ liệu, lập trình đồ họa và các nhà phát triển back-end. Cuộc sống qúa ngắn để làm một việc mà mình không thích. Kỹ năng của chúng ta đang cần và có nhiều công việc khác để thử.</p>

<h2 id="lnh-vc-cng-ngh">Lĩnh vực công nghệ</h2>
<p>Trong các câu trả lời:</p>

<ul>
  <li>32.4% xác định họ là Full-stack developers</li>
  <li>10.1% là back-end developers</li>
  <li>6.0% là font-end</li>
  <li>9.1% là mobile</li>
  <li>8.3% lập trình desktop</li>
</ul>

<p>Tôi có chút hưng phấn với kết qủa của full-stack developer. Ngành công nghiệp web được chia ra thành nhiều công đoạn chuyên biệt, bạn có thể chỉ cần làm về nội dung, CSS, thiết kế, PHP/Database hoặc làm font-end với HTML, CSS, JS thì cũng đã đủ sống rồi. Điều đó cho thấy rằng, thật khó để làm ứng dụng nếu bạn không có cái nhìn tổng quan khi tất cả các giair pháp liên hệ với nhau như thế nào.</p>

<p>Trên mobile:
* 44.6% làm về Android
* 33.4% làm về iOS</p>

<p>và 20% không chỉ rõ nền tảng - có lẽ họ là lập trình di động??</p>

<h2 id="ngn-ng-lp-trnh">Ngôn ngữ lập trình</h2>
<p>Javascript là ngôn ngữ phổ biến nhất, 55% các lập trình dùng nó và cộng thêm khoảng 13% dùng Node.js và 13% dùng AngularJS. Và tát nhiên, Javascript là yêu cầu thiết yếu của tất cả các dự án web. Tương tự, SQL là ngôn ngữ cao nhất thứ hai với 48%. Java là ngôn ngữ kế tiếp với 37.4% theo sau là C# với 31.6% và PHP vơi 29.7%.</p>

<p>Hầu hết các ngôn ngữ trên đều có mức lương tương đương nhau trừ PHP thường thấp hơn 10% đến 20% so với những người khác. Nếu bạn muốn có nhiều tiền, hãy xem xét chuyển sang Ruby, C#, Objective-C hoặc Node.js. Nếu các món trên vẫn chưa hài lòng bạn, hệ quản trị cơ sở dữ liệu Cassandra và Spark sẽ giups bạn kiếm thêm khoảng 50% so với trung bình.</p>

<p>Chỉ vì bạn đang sử dụng cong nghệ, nó không theo như bạn nghĩ. Swift có sự hài lòng cao nhất mặc dù sẽ rất thú vj để xem nó sẽ thay đổi thế nào theo thời gian. Các công nghệ mà chúng ta đang quan tâm đến để tìm hiểu bao gồm Android (18%), Javscript (15%), Python (15%), Node.js (15%) và AngularJS (13%).</p>

<p>Những công nghệ khiến ta ớn lạnh bao gồm Salesforce, Visual Basic, Perl và … WordPress.</p>

<h2 id="nn-tng">Nền tảng</h2>
<p>Mac OS được dùng bởi 21.5% developers. Điều này làm tôi ngạc nhiên: khi tham dự bất kỳ hội nghị công nghệ nào đều thấy có máy Mac. Hay là họ chỉ đem đi để khoe? Nhiều nhà phát triển dùng Windows với 34% sử dụng Win 7 và 19% dùng win8. Số khác dùng Linux với 20.5% (hơn một nửa họ dùng Ubuntu)- một thành tựu đáng kể.</p>

<p>Notepad++ là trình soạn thảo phổ biến nhất với 35% số người được hỏi sử dụng nó, Sublime Text chiếm 25% tiếp theo là Vim ở mức 15% và Emacs với 3.8%.  Điều đó cho thấy rằng, sự lựa chọn editor phụ thuộc vào vai trò của nó. Những nhà phát triển ứng dụng desktop chọn Notepadd++ trong khi Sublime Text được ưa thích bởi các nhà phát triển front-end.</p>

<p>52.5% số người được hỏi và phần lơn front-end coders thích dùng theme tối, Các theme sáng được lựa chọn bới các nhà lập trình ứng dụng desktop.</p>

<p>Một lượng lớn developers dùng Git (70%). 37% dùng SVN. Nhưng đáng lo ngại là 9.3% không quan tâm đến công cụ quản lý mã nguồn nào.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dung Các Thẻ Từ H1 đến H6]]></title>
    <link href="http://hoangddt.net/vi/blog/2015/04/dung-cac-the-h1-den-h6/"/>
    <updated>2015-04-20T17:26:01+07:00</updated>
    <id>http://hoangddt.net/vi/blog/2015/04/dung-cac-the-h1-den-h6</id>
    <content type="html"><![CDATA[<h1 id="tim-cook-kinh-doanh-khng-ch-v-vic-to-li-nhun"><strong>Tim Cook: Kinh doanh không chỉ về việc tạo lợi nhuận</strong></h1>

<!--more-->
<p># CŨNG H VỚI IN HOA</p>

<p>Cook, <strong>người kế vị Steve Jobs với vị trí là ông chủ</strong> của một công ty công nghệ khổng lồ trong năm 2011,  đã tỏ ra rất tức giận khi tham gia với một số nhà đầu tư <strong>phản động trong suốt phần hỏi đáp của cuộc họp cổ đông</strong>. Trả lời với các cuộc gọi từ “Trung tâm nghiên cứu chính sách công quốc gia” (viết tắt NCPPR), <strong>một cố vấn bảo thủ và nhà đầu tư</strong>, về Apple để kiềm chế việc đầu tư tiền vào các dự ánh năng lượng xanh mà không mang lại lợi nhuận, ông <strong>đáp lại</strong> rằng Apple đã làm “rất nhiều điều mà nằm ngoài mục tiêu lợi nhuận”.  Giám đốc điều hành nói thêm: “Chũng tôi muốn làm thế giới tốt hơn so với những ngày đầu”.
&gt; “We want to leave the world better than we found it “</p>

<h2 id="y-l-h2"><strong>Đây là h2</strong></h2>
<p>## CŨNG H2 VỚI IN HOA</p>

<p>Phát biểu trực tiếp với đại diện NCPPR, ông nói: “Nếu anh muốn <strong>tôi chỉ làm những việc mang lại lợi nhuận, anh nên <em>rút cổ phiếu khỏi công ty này</em> ** . Cook, người mà tôi thường được biết đến với phong thái điềm đạm của mình, cũng nhấn mạnh rằng ông coi trọng nhiều hơn vào việc giúp đỡ mọi người và môi trường hơn so với chỉ quan tâm tới lợi nhuận, đã nói: “Khi chúng tôi nghiên cứu để làm cho các thiết bị của chúng tôi có thể **dùng được với cả người mù, tôi không có quan tâm tới lợi nhuận</strong> “</p>

<h3 id="y-l-h3"><strong>Đây là h3</strong></h3>
<p>Bryab Chaffin, <strong>một nhà báo ở trang tin công nghệ The Mac Observer</strong> người đã tham dự cuộc họp vào thứ sáu, cho biết: “<strong>Lần duy nhấy tôi lại thấy Tim Cook tức giận</strong>”.  Anh còn nói thêm: “<strong>Biểu hiện  cơ thể của ông</strong> thay đổi và ông nói <em>nặng hơn</em> so với các cuộc nói chuyện bình thường.”</p>

<p>Tổ chức NCPPR đã thách thức với mục tiêu phát triển bền vững của Apple, một trong số đó là cho đến cuối cùng phải đạt được 100% năng lượng của tập đoàn đến từ những nguồn năng lượng xanh, <strong>và yêu cầu tầm ảnh hưởng của biện pháp đó</strong>, cùng với việc đầu tư vào các sáng kiến xanh. sẽ được áp dụng trong các <strong>dây chuuyền của công ty</strong>.  <strong>Các cổ đông <em>bảo thủ</em> đã bỏ phiếu chống tại cuộc họp</strong>, và cũng đã yêu cầu Apple phải khai báo (giair trình) chi phí của bất kỳ chương trình phát triển bền vững nào mà công ty đầu tư vào.
#### Đây là h4
<code>Since talking the helm at Apple, Cook has made notable improvements to the company's use of renewable energy</code>
Kể từ khi nắm <em>quyền chỉ huy</em> ở Apple năm 2011, Cook đã thực hiện các cải tiến đáng chú ý đến việc sủ dụng năng lượng tái tạo ở công ty, tăng việc sử dụng các nguồn năng lượng mặt trời, gió và địa nhiệt đã từng là năng lượng cho các văn phòng Apple, <strong>tăng từ khoảng 25%</strong> lên đến hơn 75% của tổng số năng lượng sử dụng.
##### Đây là h5
<strong>Người đàn ông 53 tuổi này</strong> cũng đã cam kết hàng triệu đô-la tiền của Apple để <strong>mục tiêu tốt khác nhau</strong> - trái ngược với người tiền nhiệm của ông Jobs, được cho đã từng nói với đồng nghiệp rằng đưa tiền cho <strong>tổ chức từ thiện</strong> là một sự lãng phí thời gian.</p>

<p>ĐÂy là bảng | bảng
aa | nbn
Cook cũng đã từng có những hành động để nâng cao <strong>các điều kiện làm việc</strong> tại <strong>nhà máy</strong> Foxconn ở Trung Quốc, nơi mà những chiếc Iphone và Ipad được sản xuất, sau những chỉ trích rộng rãi về việc <strong>gia tăng các vụ công nhân tự tử và việc khiếu nại của việc bóc lột sức lao động</strong>. “Chúng tôi tin rằng những công nhân ở mọi nơi đều có quyền làm việc ở nơi an toàn và hợp lý”, ông nói.</p>

<h1 id="y-l-task-llist"><strong>ĐÂY LÀ TASK LLIST</strong></h1>
<ul>
  <li>[x] @mentions, #refs, <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported</li>
  <li>[x] list syntax required (any unordered or ordered list supported)</li>
  <li>[x] this is a complete item</li>
  <li>[ ] this is an incomplete item</li>
</ul>

<h2 id="y-l-table">ĐÂY LÀ TABLE</h2>

<table>
  <thead>
    <tr>
      <th>First Header</th>
      <th>Second Header</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Content from cell 1</td>
      <td>Content from cell 2</td>
    </tr>
    <tr>
      <td>Content in the first column</td>
      <td>Content in the second column</td>
    </tr>
  </tbody>
</table>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sử Dụng Tiếng Viêt Làm Tiêu đề]]></title>
    <link href="http://hoangddt.net/vi/blog/2015/04/su-dung-tieng-viet/"/>
    <updated>2015-04-19T21:13:47+07:00</updated>
    <id>http://hoangddt.net/vi/blog/2015/04/su-dung-tieng-viet</id>
    <content type="html"><![CDATA[<p>for testing some code</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>This is a great example!</span> &mdash; <a href="http://hddt.github.io">My Blog </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="preprocessor">#include</span> <span class="include">&lt;SFML/Window.hpp&gt;</span>
<span class="preprocessor">#include</span> <span class="include">&lt;SFML/Graphics.hpp&gt;</span>
<span class="preprocessor">#include</span> <span class="include">&lt;SFML/Audio.hpp&gt;</span>

<span class="predefined-type">int</span> main(<span class="predefined-type">int</span> argc, <span class="predefined-type">char</span>* argv[])
{
  sf::RenderWindow window(sf::VideoMode(<span class="integer">640</span>, <span class="integer">480</span>), <span class="string"><span class="delimiter">&quot;</span><span class="content">SFML Music test</span><span class="delimiter">&quot;</span></span>);
  sf::Music music;
  music.openFromFile(<span class="string"><span class="delimiter">&quot;</span><span class="content">menu.ogg</span><span class="delimiter">&quot;</span></span>);
  music.setLoop(<span class="predefined-constant">true</span>);
  music.play();

  <span class="keyword">while</span> (window.isOpen()) {
    window.clear();
  }
}
</pre></div>
</div>
 </figure></notextile></div>
<!--more-->

<h2 id="just-tesing-some-code-are-you-ready">Just tesing some code, Are you ready?</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>This is a great example!</span> &mdash; <a href="http://hddt.github.io">My Blog </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="tag">&lt;div</span> <span class="attribute-name">data-slick</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;div</span> <span class="attribute-name">data-slick-panel</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">slick-panel-1</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;img</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">th</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">assets/demo/demo1.jpg</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;/div&gt;</span>
    <span class="tag">&lt;div</span> <span class="attribute-name">data-slick-panel</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">slick-panel-2</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;img</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">th</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">assets/demo/demo2.jpg</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;/div&gt;</span>
<span class="tag">&lt;/div&gt;</span>

<span class="tag">&lt;div</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">slick-panels-wrapper</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;div</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">slick-panel-1 slick-panel</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;h3&gt;</span>HEADER 1<span class="tag">&lt;/h3&gt;</span><span class="tag">&lt;img</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">th</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">assets/demo/demo1.jpg</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;/div&gt;</span>
    <span class="tag">&lt;div</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">slick-panel-2 slick-panel</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;h3&gt;</span>HEADER 2<span class="tag">&lt;/h3&gt;</span><span class="tag">&lt;img</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">th</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">assets/demo/demo2.jpg</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;/div&gt;</span>
<span class="tag">&lt;/div&gt;</span>

<span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/javascript</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="inline">
<span class="predefined">$</span>(<span class="keyword">function</span>(){
            <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">[data-slick]</span><span class="delimiter">'</span></span>).slick({
              <span class="key">centerMode</span>: <span class="predefined-constant">true</span>,
              <span class="key">slidesToShow</span>: <span class="integer">5</span>,
              <span class="key">focusOnSelect</span>: <span class="predefined-constant">true</span>,
              <span class="key">responsive</span>: [
                {
                  <span class="key">breakpoint</span>: <span class="integer">1024</span>,
                  <span class="key">settings</span>: {
                    <span class="key">focusOnSelect</span>: <span class="predefined-constant">true</span>,
                    <span class="key">slidesToShow</span>: <span class="integer">3</span>
                  }
                },
                {
                  <span class="key">breakpoint</span>: <span class="integer">640</span>,
                  <span class="key">settings</span>: {
                    <span class="key">arrows</span>: <span class="predefined-constant">false</span>,
                    <span class="key">slidesToShow</span>: <span class="integer">1</span>
                  }
                }
              ]
            });
            
            <span class="keyword">var</span> currentSlide = <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">[data-slick]</span><span class="delimiter">'</span></span>).slick(<span class="string"><span class="delimiter">'</span><span class="content">slickCurrentSlide</span><span class="delimiter">'</span></span>);         
            <span class="keyword">var</span> currentPanel = <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">[data-slick-index=&quot;</span><span class="delimiter">'</span></span> + currentSlide + <span class="string"><span class="delimiter">'</span><span class="content">&quot;]</span><span class="delimiter">'</span></span>).attr(<span class="string"><span class="delimiter">'</span><span class="content">data-slick-panel</span><span class="delimiter">'</span></span>);
            <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">.slick-panel</span><span class="delimiter">'</span></span>).hide();
            <span class="predefined">$</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">.</span><span class="delimiter">&quot;</span></span> + currentPanel).show();
            
            <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">[data-slick]</span><span class="delimiter">'</span></span>).on(<span class="string"><span class="delimiter">'</span><span class="content">afterChange</span><span class="delimiter">'</span></span>, <span class="keyword">function</span>(slick, currentSlide){
                <span class="keyword">var</span> currentSlide = <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">[data-slick]</span><span class="delimiter">'</span></span>).slick(<span class="string"><span class="delimiter">'</span><span class="content">slickCurrentSlide</span><span class="delimiter">'</span></span>);         
                <span class="keyword">var</span> currentPanel = <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">[data-slick-index=&quot;</span><span class="delimiter">'</span></span> + currentSlide + <span class="string"><span class="delimiter">'</span><span class="content">&quot;]</span><span class="delimiter">'</span></span>).attr(<span class="string"><span class="delimiter">'</span><span class="content">data-slick-panel</span><span class="delimiter">'</span></span>);
                <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">.slick-panel</span><span class="delimiter">'</span></span>).hide();
                <span class="predefined">$</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">.</span><span class="delimiter">&quot;</span></span> + currentPanel).show();
            });
            
        });</span>

<span class="tag">&lt;/script&gt;</span>
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>This is a great example!</span> &mdash; <a href="http://hddt.github.io">My Blog </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> ruby
apply <span class="key">plugin</span>: <span class="string"><span class="delimiter">'</span><span class="content">findbugs</span><span class="delimiter">'</span></span>
apply <span class="key">plugin</span>: <span class="string"><span class="delimiter">'</span><span class="content">pmd</span><span class="delimiter">'</span></span>

check.dependsOn <span class="string"><span class="delimiter">'</span><span class="content">pmd</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">findbugs</span><span class="delimiter">'</span></span>

task pmd(<span class="key">type</span>: <span class="constant">Pmd</span>) {
    ignoreFailures = <span class="predefined-constant">true</span>
    ruleSetFiles = files(<span class="string"><span class="delimiter">&quot;</span><span class="content">${project.rootDir}/config/quality/pmd/pmd-ruleset.xml</span><span class="delimiter">&quot;</span></span>)
    ruleSets = []

    source fileTree(<span class="string"><span class="delimiter">&quot;</span><span class="content">src/</span><span class="delimiter">&quot;</span></span>)
    include <span class="string"><span class="delimiter">'</span><span class="content">**/*.java</span><span class="delimiter">'</span></span>
    exclude <span class="string"><span class="delimiter">'</span><span class="content">**/gen/**</span><span class="delimiter">'</span></span>

    reports {
        xml.enabled = <span class="predefined-constant">true</span>
        html.enabled = <span class="predefined-constant">true</span>
    }
}

findbugs {
    sourceSets = []
    ignoreFailures = <span class="predefined-constant">true</span>
}

task findbugs(<span class="key">type</span>: <span class="constant">FindBugs</span>) {
    excludeFilter file(<span class="string"><span class="delimiter">&quot;</span><span class="content">${project.rootDir}/config/quality/findbugs/findbugs-filter.xml</span><span class="delimiter">&quot;</span></span>)
    classes = fileTree(<span class="string"><span class="delimiter">&quot;</span><span class="content">${project.rootDir}/build/intermediates/classes/debug/</span><span class="delimiter">&quot;</span></span>)
    source = fileTree(<span class="string"><span class="delimiter">&quot;</span><span class="content">src/</span><span class="delimiter">&quot;</span></span>)
    classpath = files()
    effort = <span class="string"><span class="delimiter">'</span><span class="content">max</span><span class="delimiter">'</span></span>

    reports {
        xml.enabled = <span class="predefined-constant">true</span>
        html.enabled = <span class="predefined-constant">false</span>
    }
}

</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>This is a great example!</span> &mdash; <a href="http://hddt.github.io">My Blog </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// cplusplus</span>
<span class="preprocessor">#include</span> <span class="include">&lt;iostream&gt;</span>
<span class="preprocessor">#include</span> <span class="include">&lt;SDL.h&gt;</span>
<span class="preprocessor">#include</span> <span class="include">&lt;SDL_opengl.h&gt;</span>
<span class="preprocessor">#include</span> <span class="include">&lt;CEGUI/CEGUI.h&gt;</span>
<span class="preprocessor">#include</span> <span class="include">&lt;CEGUI/RendererModules/OpenGL/GLRenderer.h&gt;</span>
<span class="preprocessor">#include</span> <span class="include">&lt;CEGUI/XMLParserModules/Expat/XMLParser.h&gt;</span>
<span class="preprocessor">#include</span> <span class="include">&lt;CEGUI/ImageCodecModules/DevIL/ImageCodec.h&gt;</span>

<span class="predefined-type">int</span> main(<span class="predefined-type">int</span>, <span class="predefined-type">char</span>**)
{
  <span class="comment">/***************************************
   * Init SDL
   ***************************************/</span>

  <span class="keyword">if</span> (SDL_Init(SDL_INIT_EVERYTHING) != <span class="integer">0</span>){
    std::cout &lt;&lt; <span class="string"><span class="delimiter">&quot;</span><span class="content">SDL_Init Error: </span><span class="delimiter">&quot;</span></span> &lt;&lt; SDL_GetError() &lt;&lt; std::endl;
    SDL_Quit();
    <span class="keyword">return</span> <span class="integer">1</span>;
  }

  SDL_Window* p_window = SDL_CreateWindow(<span class="string"><span class="delimiter">&quot;</span><span class="content">Test window</span><span class="delimiter">&quot;</span></span>, <span class="integer">100</span>, <span class="integer">100</span>, <span class="integer">640</span>, <span class="integer">480</span>, SDL_WINDOW_SHOWN | SDL_WINDOW_OPENGL);
  <span class="keyword">if</span> (!p_window) {
    std::cerr &lt;&lt; <span class="string"><span class="delimiter">&quot;</span><span class="content">failed to set up window.</span><span class="delimiter">&quot;</span></span> &lt;&lt; std::endl;
    SDL_Quit();
    <span class="keyword">return</span> <span class="integer">2</span>;
  }

  SDL_ShowCursor(<span class="integer">0</span>);

  SDL_Renderer* p_sdl_renderer = SDL_CreateRenderer(p_window, -<span class="integer">1</span>, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
  <span class="keyword">if</span> (!p_sdl_renderer) {
    SDL_DestroyWindow(p_window);
    SDL_Quit();
    std::cerr &lt;&lt; <span class="string"><span class="delimiter">&quot;</span><span class="content">Faield to set up renderer.</span><span class="delimiter">&quot;</span></span> &lt;&lt; std::endl;
    <span class="keyword">return</span> <span class="integer">3</span>;
  }

  <span class="comment">/***************************************
   * Init CEGUI
   ***************************************/</span>

  <span class="comment">//CEGUI::OpenGLRenderer&amp; renderer = CEGUI::OpenGLRenderer::bootstrapSystem();</span>
  CEGUI::OpenGLRenderer&amp; renderer = CEGUI::OpenGLRenderer::create();
  CEGUI::DefaultResourceProvider* p_provider = <span class="keyword">new</span> CEGUI::DefaultResourceProvider();
  CEGUI::ExpatParser* p_xml_parser = <span class="keyword">new</span> CEGUI::ExpatParser();
  CEGUI::DevILImageCodec* p_imgcodec = <span class="keyword">new</span> CEGUI::DevILImageCodec();

  CEGUI::System::create(renderer, p_provider, p_xml_parser, p_imgcodec, <span class="predefined-constant">NULL</span>);

  p_provider-&gt;setResourceGroupDirectory(<span class="string"><span class="delimiter">&quot;</span><span class="content">schemes</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">/usr/share/cegui-0/schemes/</span><span class="delimiter">&quot;</span></span>);
  p_provider-&gt;setResourceGroupDirectory(<span class="string"><span class="delimiter">&quot;</span><span class="content">imagesets</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">/usr/share/cegui-0/imagesets/</span><span class="delimiter">&quot;</span></span>);
  p_provider-&gt;setResourceGroupDirectory(<span class="string"><span class="delimiter">&quot;</span><span class="content">fonts</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">/usr/share/cegui-0/fonts/</span><span class="delimiter">&quot;</span></span>);
  p_provider-&gt;setResourceGroupDirectory(<span class="string"><span class="delimiter">&quot;</span><span class="content">layouts</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">/usr/share/cegui-0/layouts/</span><span class="delimiter">&quot;</span></span>);
  p_provider-&gt;setResourceGroupDirectory(<span class="string"><span class="delimiter">&quot;</span><span class="content">looknfeels</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">/usr/share/cegui-0/looknfeel/</span><span class="delimiter">&quot;</span></span>);
  p_provider-&gt;setResourceGroupDirectory(<span class="string"><span class="delimiter">&quot;</span><span class="content">lua_scripts</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">/usr/share/cegui-0/lua_scripts/</span><span class="delimiter">&quot;</span></span>);

  <span class="comment">/* Now tell each of CEGUI’s resource-consuming classes (the &quot;*Manager&quot; classes)
   * which group of the filesystem provider to ask for its stuff. */</span>
  CEGUI::ImageManager::setImagesetDefaultResourceGroup(<span class="string"><span class="delimiter">&quot;</span><span class="content">imagesets</span><span class="delimiter">&quot;</span></span>);
  CEGUI::Font::setDefaultResourceGroup(<span class="string"><span class="delimiter">&quot;</span><span class="content">fonts</span><span class="delimiter">&quot;</span></span>);
  CEGUI::Scheme::setDefaultResourceGroup(<span class="string"><span class="delimiter">&quot;</span><span class="content">schemes</span><span class="delimiter">&quot;</span></span>);
  CEGUI::WidgetLookManager::setDefaultResourceGroup(<span class="string"><span class="delimiter">&quot;</span><span class="content">looknfeels</span><span class="delimiter">&quot;</span></span>);
  CEGUI::WindowManager::setDefaultResourceGroup(<span class="string"><span class="delimiter">&quot;</span><span class="content">layouts</span><span class="delimiter">&quot;</span></span>);
  CEGUI::ScriptModule::setDefaultResourceGroup(<span class="string"><span class="delimiter">&quot;</span><span class="content">lua_scripts</span><span class="delimiter">&quot;</span></span>);

  CEGUI::SchemeManager::getSingleton().createFromFile(<span class="string"><span class="delimiter">&quot;</span><span class="content">TaharezLook.scheme</span><span class="delimiter">&quot;</span></span>);
  CEGUI::FontManager::getSingleton().createFromFile(<span class="string"><span class="delimiter">&quot;</span><span class="content">DejaVuSans-12.font</span><span class="delimiter">&quot;</span></span>);
  CEGUI::System::getSingleton().getDefaultGUIContext().setDefaultFont(<span class="string"><span class="delimiter">&quot;</span><span class="content">DejaVuSans-12</span><span class="delimiter">&quot;</span></span>);
  CEGUI::System::getSingleton().getDefaultGUIContext().getMouseCursor().setDefaultImage(<span class="string"><span class="delimiter">&quot;</span><span class="content">TaharezLook/MouseArrow</span><span class="delimiter">&quot;</span></span>);

  <span class="comment">// Tell CEGUI how large our Window is. Forget this and you’ll never see anything.</span>
  CEGUI::System::getSingleton().notifyDisplaySizeChanged(CEGUI::Sizef(<span class="integer">640</span>, <span class="integer">480</span>));

  CEGUI::WindowManager&amp; wmgr = CEGUI::WindowManager::getSingleton();
  CEGUI::Window* p_cegui_rootwin = wmgr.createWindow(<span class="string"><span class="delimiter">&quot;</span><span class="content">DefaultWindow</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">root</span><span class="delimiter">&quot;</span></span>);
  CEGUI::System::getSingleton().getDefaultGUIContext().setRootWindow(p_cegui_rootwin);

  CEGUI::FrameWindow* p_testframe = <span class="keyword">static_cast</span>&lt;CEGUI::FrameWindow*&gt;(wmgr.createWindow(<span class="string"><span class="delimiter">&quot;</span><span class="content">TaharezLook/FrameWindow</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">testWindow</span><span class="delimiter">&quot;</span></span>));
  p_testframe-&gt;setPosition(CEGUI::UVector2(CEGUI::UDim(<span class="float">0</span><span class="float">.25</span>, <span class="float">0</span><span class="float">.0</span>), CEGUI::UDim(<span class="float">0</span><span class="float">.25</span>, <span class="float">0</span><span class="float">.0f</span>)));
  p_testframe-&gt;setSize(CEGUI::USize(CEGUI::UDim(<span class="float">0</span><span class="float">.5f</span>, <span class="float">0</span><span class="float">.0f</span>), CEGUI::UDim(<span class="float">0</span><span class="float">.5f</span>, <span class="float">0</span><span class="float">.0f</span>)));
  p_testframe-&gt;setText(<span class="string"><span class="delimiter">&quot;</span><span class="content">Hello, World!</span><span class="delimiter">&quot;</span></span>);
  p_cegui_rootwin-&gt;addChild(p_testframe);

  glClearColor(<span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">255</span>);

  SDL_Surface* p_image = SDL_LoadBMP(<span class="string"><span class="delimiter">&quot;</span><span class="content">../hello.bmp</span><span class="delimiter">&quot;</span></span>);
  SDL_Texture* p_imgtexture = SDL_CreateTextureFromSurface(p_sdl_renderer, p_image);
  SDL_FreeSurface(p_image);
  p_image = <span class="predefined-constant">NULL</span>;

  <span class="comment">/***************************************
   * Main loop
   ***************************************/</span>
  <span class="predefined-type">bool</span> quit = <span class="predefined-constant">false</span>;
  SDL_Event evt;
  <span class="keyword">while</span> (!quit) {
    <span class="comment">// Grab all events from the queue</span>
    <span class="keyword">while</span> (SDL_PollEvent(&amp;evt)) {
      <span class="keyword">if</span> (evt.type == SDL_QUIT) {
        quit = <span class="predefined-constant">true</span>;
      }
      <span class="keyword">else</span> {
        std::cout &lt;&lt; <span class="string"><span class="delimiter">&quot;</span><span class="content">Unknown event received.</span><span class="delimiter">&quot;</span></span> &lt;&lt; std::endl;
      }
    }

    SDL_RenderClear(p_sdl_renderer);
    SDL_RenderCopy(p_sdl_renderer, p_imgtexture, <span class="predefined-constant">NULL</span>, <span class="predefined-constant">NULL</span>);
    SDL_RenderPresent(p_sdl_renderer);

    SDL_GLContext context = SDL_GL_CreateContext(p_window);
    glClear(GL_COLOR_BUFFER_BIT);
    CEGUI::System::getSingleton().renderAllGUIContexts();
    SDL_GL_SwapWindow(p_window);
    SDL_GL_DeleteContext(context);
  }

  <span class="comment">/***************************************
   * Cleanup
   ***************************************/</span>

  CEGUI::System::destroy();
  CEGUI::OpenGLRenderer::destroy(renderer);
  <span class="keyword">delete</span> p_imgcodec;
  <span class="keyword">delete</span> p_xml_parser;
  <span class="keyword">delete</span> p_provider;

  SDL_DestroyTexture(p_imgtexture);
  SDL_DestroyRenderer(p_sdl_renderer);
  SDL_DestroyWindow(p_window);
  SDL_Quit();
  <span class="keyword">return</span> <span class="integer">0</span>;
}

</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>This is a great example!</span> &mdash; <a href="http://hddt.github.io">My Blog </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="line head"><span class="head">--- </span><span class="filename">a/application_templates/SDL2.cpp</span>    Sun Jan 04 18:31:27 2015 +0100</span>
<span class="line head"><span class="head">+++ </span><span class="filename">b/application_templates/SDL2.cpp</span>    Sat Mar 14 09:43:51 2015 +0100</span>
<span class="line change"><span class="change">@@</span> -40,7 +40,8 <span class="change">@@</span></span>
 <span class="preprocessor">#include</span> <span class="include">&lt;iostream&gt;</span>
 
 <span class="preprocessor">#include</span> <span class="include">&lt;CEGUI/CEGUI.h&gt;</span>
<span class="line delete"><span class="delete">-</span><span class="preprocessor">#include</span> <span class="include">&lt;CEGUI/RendererModules/OpenGL/GL3Renderer.h&gt;</span></span>
<span class="line insert"><span class="insert">+</span><span class="comment">//#include &lt;CEGUI/RendererModules/OpenGL/GL3Renderer.h&gt;</span></span>
<span class="line insert"><span class="insert">+</span><span class="preprocessor">#include</span> <span class="include">&lt;CEGUI/RendererModules/OpenGL/GLRenderer.h&gt;</span></span>
 
 <span class="preprocessor">#include</span> <span class="include">&lt;SDL.h&gt;</span>
 <span class="preprocessor">#include</span> <span class="include">&lt;SDL_opengl.h&gt;</span>
<span class="line change"><span class="change">@@</span> -161,7 +162,7 <span class="change">@@</span></span>
     <span class="directive">using</span> <span class="keyword">namespace</span> CEGUI;
 
     <span class="comment">// create renderer and enable extra states</span>
<span class="line delete"><span class="delete">-</span>    OpenGL<span class="eyecatcher">3Renderer&amp; cegui_renderer = OpenGL3</span>Renderer::create(Sizef(<span class="integer">80</span><span class="float">0</span>.f, <span class="integer">60</span><span class="float">0</span>.f));</span>
<span class="line insert"><span class="insert">+</span>    OpenGL<span class="eyecatcher">Renderer&amp; cegui_renderer = OpenGL</span>Renderer::create(Sizef(<span class="integer">80</span><span class="float">0</span>.f, <span class="integer">60</span><span class="float">0</span>.f));</span>
     cegui_renderer.enableExtraStateSettings(<span class="predefined-constant">true</span>);
 
     <span class="comment">// create CEGUI system object</span>
<span class="line change"><span class="change">@@</span> -237,7 +238,8 <span class="change">@@</span></span>
     }
 }
 
<span class="line delete"><span class="delete">-</span><span class="predefined-type">int</span> SDL_main(<span class="predefined-type">int</span> argc, <span class="predefined-type">char</span>* argv[])</span>
<span class="line insert"><span class="insert">+</span><span class="comment">//int SDL_main(int argc, char* argv[])</span></span>
<span class="line insert"><span class="insert">+</span><span class="predefined-type">int</span> main(<span class="predefined-type">int</span> argc, <span class="predefined-type">char</span>* argv[])</span>
 {
     <span class="directive">using</span> <span class="keyword">namespace</span> CEGUI;
 
<span class="line change"><span class="change">@@</span> -260,7 +262,7 <span class="change">@@</span></span>
     SDL_Event event;
     <span class="predefined-type">float</span> time = SDL_GetTicks() / <span class="integer">100</span><span class="float">0</span>.f;
 
<span class="line delete"><span class="delete">-</span>    OpenGL<span class="eyecatcher">3Renderer* renderer = <span class="keyword">static_cast</span>&lt;OpenGL3</span>Renderer*&gt;(System::getSingleton().getRenderer());</span>
<span class="line insert"><span class="insert">+</span>    OpenGL<span class="eyecatcher">Renderer* renderer = <span class="keyword">static_cast</span>&lt;OpenGL</span>Renderer*&gt;(System::getSingleton().getRenderer());</span>
 
     <span class="comment">// repeat until a quit is requested</span>
     <span class="keyword">while</span> (!quit &amp;&amp; !SDL_QuitRequested())
<span class="line change"><span class="change">@@</span> -335,7 +337,7 <span class="change">@@</span></span>
 
     <span class="comment">// destroy system and renderer</span>
     System::destroy();
<span class="line delete"><span class="delete">-</span>    OpenGL<span class="eyecatcher">3</span>Renderer::destroy(*renderer);</span>
<span class="line insert"><span class="insert">+</span>    OpenGLRenderer::destroy(*renderer);</span>
     renderer = <span class="integer">0</span>;
 
     <span class="comment">// delete SDL GL context</span>
<span class="line change"><span class="change">@@</span> -348,4 +350,4 <span class="change">@@</span></span>
     SDL_Quit();
 
     <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line delete"><span class="delete">-</span>}</span>
<span class="comment">\ No newline at end of file</span>
<span class="line insert"><span class="insert">+</span>}</span>

</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>This is a great example!</span> &mdash; <a href="http://hddt.github.io">My Blog </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// c</span>
<span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>

<span class="directive">void</span> Nhap(<span class="predefined-type">float</span> a[], <span class="predefined-type">int</span> n)
{
    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Nhap lan luot cac he so:</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
    <span class="keyword">for</span> (<span class="predefined-type">int</span> i = <span class="integer">0</span>; i &lt;= n; ++i)
    {
        scanf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%f</span><span class="delimiter">&quot;</span></span>, &amp;a[i]);
    }
}

<span class="comment">// Ham tinh dung de quy</span>
<span class="directive">void</span> HoocnerRecurison(<span class="predefined-type">float</span> a[], <span class="predefined-type">int</span> n, <span class="predefined-type">float</span> c)
{
    <span class="keyword">if</span> (n==<span class="integer">0</span>) <span class="keyword">return</span>;
    <span class="keyword">for</span> (<span class="predefined-type">int</span> i = <span class="integer">0</span>;i &lt; n;i++)
        a[i+<span class="integer">1</span>] = a[i] *c +a[i+<span class="integer">1</span>];
    HoocnerRecurison(a,n-<span class="integer">1</span>,c);
}

<span class="comment">// Ham tinh khong dung de quy</span>
<span class="directive">void</span> Hoocner(<span class="predefined-type">float</span> a[], <span class="predefined-type">int</span> n, <span class="predefined-type">float</span> c)
{
     <span class="keyword">for</span> (<span class="predefined-type">int</span> i = n; i &gt; <span class="integer">0</span>; --i)
         <span class="keyword">for</span> (<span class="predefined-type">int</span> j=<span class="integer">0</span>; j&lt;i; j++)
             a[j+<span class="integer">1</span>] = a[j]*c + a[j+<span class="integer">1</span>];
}

<span class="directive">void</span> KetQua(<span class="predefined-type">float</span> a[], <span class="predefined-type">int</span> n, <span class="predefined-type">float</span> c)
{
    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Cac he so cua phuong trinh</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
    <span class="keyword">for</span> (<span class="predefined-type">int</span> i = <span class="integer">0</span>; i &lt;= n; ++i)
    {
        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%.2f  </span><span class="delimiter">&quot;</span></span>, a[i]);
    }
}

<span class="predefined-type">int</span> main()
{
    <span class="predefined-type">int</span> n, c;
    <span class="predefined-type">float</span> a[<span class="integer">100</span>];
    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Nhap bac phuong trinh: n= </span><span class="delimiter">&quot;</span></span>);
    scanf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d</span><span class="delimiter">&quot;</span></span>,&amp;n);
    Nhap(a,n);
    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Nhap gia tri c: </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
    scanf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d</span><span class="delimiter">&quot;</span></span>, &amp;c);
    HoocnerRecurison(a, n, c);
    KetQua(a,n,c);
    <span class="keyword">return</span> <span class="integer">0</span>;
}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>This is a great example!</span> &mdash; <a href="http://hddt.github.io">My Blog </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment"># Python</span>
<span class="keyword">from</span> <span class="include">rest_framework</span> <span class="keyword">import</span> <span class="include">serializers</span>
<span class="keyword">from</span> <span class="include">snippets.models</span> <span class="keyword">import</span> <span class="include">Snippet</span>
<span class="keyword">from</span> <span class="include">django.contrib.auth.models</span> <span class="keyword">import</span> <span class="include">User</span>


<span class="keyword">class</span> <span class="class">SnippetSerializer</span>(serializers.HyperlinkedModelSerializer):
    owner = serializers.ReadOnlyField(source=<span class="string"><span class="delimiter">'</span><span class="content">owner.username</span><span class="delimiter">'</span></span>)
    highlight = serializers.HyperlinkedIdentityField(view_name=<span class="string"><span class="delimiter">'</span><span class="content">snippet-highlight</span><span class="delimiter">'</span></span>, format=<span class="string"><span class="delimiter">'</span><span class="content">html</span><span class="delimiter">'</span></span>)

    <span class="keyword">class</span> <span class="class">Meta</span>:
        model = Snippet
        fields = (<span class="string"><span class="delimiter">'</span><span class="content">url</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">highlight</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">owner</span><span class="delimiter">'</span></span>,
                  <span class="string"><span class="delimiter">'</span><span class="content">title</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">code</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">linenos</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">language</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">style</span><span class="delimiter">'</span></span>)


<span class="keyword">class</span> <span class="class">UserSerializer</span>(serializers.HyperlinkedModelSerializer):
    snippets = serializers.HyperlinkedRelatedField(many=<span class="predefined-constant">True</span>, view_name=<span class="string"><span class="delimiter">'</span><span class="content">snippet-detail</span><span class="delimiter">'</span></span>, read_only=<span class="predefined-constant">True</span>)

    <span class="keyword">class</span> <span class="class">Meta</span>:
        model = User
        fields = (<span class="string"><span class="delimiter">'</span><span class="content">url</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">username</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">snippets</span><span class="delimiter">'</span></span>)
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment"># YAML</span>
<span class="key">root</span>: <span class="string"><span class="content">/</span></span>
<span class="key">permalink</span>: <span class="string"><span class="content">/blog/:year/:month/:title/</span></span>
<span class="key">source</span>: <span class="string"><span class="content">source</span></span>
<span class="key">destination</span>: <span class="string"><span class="content">public</span></span>
<span class="key">plugins</span>: <span class="string"><span class="content">plugins</span></span>
<span class="key">code_dir</span>: <span class="string"><span class="content">downloads/code</span></span>
<span class="key">category_dir</span>: <span class="string"><span class="content">blog/categories</span></span>
<span class="key">markdown</span>: <span class="string"><span class="content">kramdown</span></span>
<span class="key">kramdown</span>:
  <span class="key">use_coderay</span>: <span class="string"><span class="content">true</span></span>
  <span class="key">coderay</span>:
    <span class="key">coderay_line_numbers</span>: <span class="string"><span class="content">table</span></span>
    <span class="key">coderay_css</span>: <span class="string"><span class="content">class</span></span>
<span class="key">highlighter</span>: <span class="string"><span class="content">pygments</span></span> <span class="comment"># default python pygments have been replaced by pygments.rb</span>
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>This is a great example!</span> &mdash; <a href="http://hddt.github.io">My Blog </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
{
    <span class="key"><span class="delimiter">&quot;</span><span class="content">Books</span><span class="delimiter">&quot;</span></span>: [
        {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Description</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">If you're ready to create web pages more complex than what you can build with HTML and CSS, Head First PHP &amp; MySQL is the ultimate learning guide to building dynamic, database-driven websites using PHP and MySQL. Packed with real-world examples, this ...</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">ID</span><span class="delimiter">&quot;</span></span>: <span class="integer">947185260</span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Image</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">http://s.it-ebooks-api.info/3/head_first_php__mysql.jpg</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Title</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Head First PHP &amp; MySQL</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">isbn</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">9780596006303</span><span class="delimiter">&quot;</span></span>
        }, 
        {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Description</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">If you know HTML, this guide will have you building interactive websites quickly. You'll learn how to create responsive, data-driven websites with PHP, MySQL, and JavaScript, regardless of whether you already know how to program. Discover how the pow ...</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">ID</span><span class="delimiter">&quot;</span></span>: <span class="integer">1283537446</span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Image</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">http://s.it-ebooks-api.info/3/learning_php_mysql_and_javascript.jpg</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">SubTitle</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">A Step-by-Step Guide to Creating Dynamic Websites</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Title</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Learning PHP, MySQL, and JavaScript</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">isbn</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">9780596157135</span><span class="delimiter">&quot;</span></span>
        }, 
        {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Description</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">PHP &amp; MySQL: Novice to Ninja, 5th Edition is a hands-on guide that will help you build your first database driven website. In the fifth edition of this best-selling book, you'll learn how to use PHP (used on 20 million sites worldwide) to build your ...</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">ID</span><span class="delimiter">&quot;</span></span>: <span class="integer">4061324578</span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Image</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">http://s.it-ebooks-api.info/7/php__mysql_novice_to_ninja_5th_edition.jpg</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">SubTitle</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">The Easy Way to Build Your Own Database Driven Website</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Title</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">PHP &amp; MySQL: Novice to Ninja, 5th Edition</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">isbn</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">9780987153081</span><span class="delimiter">&quot;</span></span>
        }, 
        {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Description</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Learn how to build interactive, data-driven websites - even if you don't have any previous programming experience. If you know how to build static sites with HTML, this popular guide will help you tackle dynamic web programming. You'll get a thorough ...</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">ID</span><span class="delimiter">&quot;</span></span>: <span class="integer">1290301462</span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Image</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">http://s.it-ebooks-api.info/3/learning_php_mysql_javascript_and_css_2nd_edition.jpg</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">SubTitle</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">A Step-by-Step Guide to Creating Dynamic Websites</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Title</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Learning PHP, MySQL, JavaScript, and CSS, 2nd Edition</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">isbn</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">9781449319267</span><span class="delimiter">&quot;</span></span>
        }, 
        {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Description</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">In just a short time, you can learn how to use PHP, MySQL, and Apache together to create dynamic, interactive websites and applications using the three leading open-source web development technologies. Using a straightforward, step-by-step approach, ...</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">ID</span><span class="delimiter">&quot;</span></span>: <span class="integer">2594711238</span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Image</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">http://s.it-ebooks-api.info/12/sams_teach_yourself_php_mysql_and_apache_all_in_one_5th_edition.jpg</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Title</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Sams Teach Yourself PHP, MySQL and Apache All in One, 5th Edition</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">isbn</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">9780672335433</span><span class="delimiter">&quot;</span></span>
        }, 
        {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Description</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Build interactive, data-driven websites with the potent combination of open-source technologies and web standards, even if you only have basic HTML knowledge. With this popular hands-on guide, you'll tackle dynamic web programming with the help of to ...</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">ID</span><span class="delimiter">&quot;</span></span>: <span class="integer">1967945201</span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Image</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">http://s.it-ebooks-api.info/3/learning_php_mysql_javascript_css__html5_3rd_edition.jpg</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">SubTitle</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">A Step-by-Step Guide to Creating Dynamic Websites</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Title</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Learning PHP, MySQL, JavaScript, CSS &amp; HTML5, 3rd Edition</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">isbn</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">9781491949467</span><span class="delimiter">&quot;</span></span>
        }, 
        {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Description</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Build interactive, data-driven websites with the potent combination of open-source technologies and web standards, even if you have only basic HTML knowledge. With this popular hands-on guide, you'll tackle dynamic web programming with the help of to ...</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">ID</span><span class="delimiter">&quot;</span></span>: <span class="integer">1953139307</span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Image</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">http://s.it-ebooks-api.info/3/learning_php_mysql__javascript_4th_edition.jpg</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">SubTitle</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">With jQuery, CSS &amp; HTML5</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Title</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Learning PHP, MySQL &amp; JavaScript, 4th Edition</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">isbn</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">9781491918661</span><span class="delimiter">&quot;</span></span>
        }, 
        {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Description</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">If you can build websites with CSS and JavaScript, this book takes you to the next level-creating dynamic, database-driven websites with PHP and MySQL. Learn how to build a database, manage your content, and interact with users through queries and we ...</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">ID</span><span class="delimiter">&quot;</span></span>: <span class="integer">2279690981</span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Image</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">http://s.it-ebooks-api.info/3/php__mysql_the_missing_manual.jpg</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Title</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">PHP &amp; MySQL: The Missing Manual</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">isbn</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">9780596515867</span><span class="delimiter">&quot;</span></span>
        }, 
        {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Description</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Build Your Own Database Driven Web Site Using PHP &amp;amp; MySQL, 4th Edition is a practical, hands-on guide to learning all the tools, principles, and techniques needed to build a fully functional database driven web site using PHP &amp;amp; MySQL. This bo ...</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">ID</span><span class="delimiter">&quot;</span></span>: <span class="integer">441392374</span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Image</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">http://s.it-ebooks-api.info/7/build_your_own_database_driven_web_site_using_php.jpg</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Title</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Build Your Own Database Driven Web Site Using PHP &amp; MySQL, 4th Edition</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">isbn</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">9780980576818</span><span class="delimiter">&quot;</span></span>
        }, 
        {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Description</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Beginning PHP and MySQL: From Novice to Professional, Fourth Edition is a major update of W. Jason Gilmore's authoritative book on PHP and MySQL. The fourth edition includes complete coverage of PHP 5.3 features, including namespacing, an update of A ...</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">ID</span><span class="delimiter">&quot;</span></span>: <span class="integer">225821771</span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Image</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">http://s.it-ebooks-api.info/6/beginning_php_and_mysql_from_novice_to_professional_4th_edition.jpg</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">SubTitle</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">From Novice to Professional</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">Title</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Beginning PHP and MySQL, 4th Edition</span><span class="delimiter">&quot;</span></span>, 
            <span class="key"><span class="delimiter">&quot;</span><span class="content">isbn</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">9781430231141</span><span class="delimiter">&quot;</span></span>
        }
    ], 
    <span class="key"><span class="delimiter">&quot;</span><span class="content">Error</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">0</span><span class="delimiter">&quot;</span></span>, 
    <span class="key"><span class="delimiter">&quot;</span><span class="content">Page</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>, 
    <span class="key"><span class="delimiter">&quot;</span><span class="content">Time</span><span class="delimiter">&quot;</span></span>: <span class="float">0.0046</span>, 
    <span class="key"><span class="delimiter">&quot;</span><span class="content">Total</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">180</span><span class="delimiter">&quot;</span></span>
}

</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="tag">&lt;macrodef</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">create_manifest</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;attribute</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">jar.classname</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
        <span class="tag">&lt;sequential&gt;</span>
            <span class="tag">&lt;manifest</span> <span class="attribute-name">file</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">jar_temp/META-INF/MANIFEST.MF</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
                <span class="tag">&lt;attribute</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Manifest-Version</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">1.0</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
                <span class="tag">&lt;attribute</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Version</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">3.4</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
                <span class="tag">&lt;attribute</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Company</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Pubnub</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
                <span class="tag">&lt;attribute</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Project</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">pubnub-api</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
                <span class="tag">&lt;attribute</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Java-Version</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">${java.version}</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
                <span class="tag">&lt;attribute</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Rsrc-Class-Path</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">./ bcprov-jdk15on-1.47.jar commons-cli-1.2.jar json-simple-1.1.1.jar json-20090211.jar slf4j-api-1.7.5.jar slf4j-simple-1.7.5.jar</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
                <span class="tag">&lt;attribute</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Class-Path</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">.</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
                <span class="tag">&lt;attribute</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Rsrc-Main-Class</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">@{jar.classname}</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
                <span class="tag">&lt;attribute</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Main-Class</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
            <span class="tag">&lt;/manifest&gt;</span>
        <span class="tag">&lt;/sequential&gt;</span>
    <span class="tag">&lt;/macrodef&gt;</span>
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>This is a great example! </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">package</span> <span class="namespace">com.pubnub.api</span>;

<span class="keyword">import</span> <span class="include">java.io.ByteArrayOutputStream</span>;
<span class="keyword">import</span> <span class="include">java.util.zip.GZIPInputStream</span>;
<span class="keyword">import</span> <span class="include">java.io.IOException</span>;
<span class="keyword">import</span> <span class="include">java.io.InputStream</span>;
<span class="keyword">import</span> <span class="include">java.net.HttpURLConnection</span>;
<span class="keyword">import</span> <span class="include">java.net.MalformedURLException</span>;
<span class="keyword">import</span> <span class="include">java.net.ProtocolException</span>;
<span class="keyword">import</span> <span class="include">java.net.SocketTimeoutException</span>;
<span class="keyword">import</span> <span class="include">java.net.URL</span>;
<span class="keyword">import</span> <span class="include">java.util.Enumeration</span>;
<span class="keyword">import</span> <span class="include">java.util.Hashtable</span>;

<span class="keyword">import</span> <span class="include">org.json.JSONArray</span>;
<span class="keyword">import</span> <span class="include">org.json.JSONException</span>;
<span class="keyword">import</span> <span class="include">org.json.JSONObject</span>;

<span class="keyword">import</span> <span class="include">com.pubnub.api.PubnubException</span>;
<span class="keyword">import</span> <span class="include">static</span> <span class="include">com.pubnub.api.PubnubError</span>.*;

<span class="type">class</span> <span class="class">HttpClientCore</span> <span class="directive">extends</span> HttpClient {
    <span class="directive">private</span> <span class="type">int</span> requestTimeout = <span class="integer">310000</span>;
    <span class="directive">private</span> <span class="type">int</span> connectionTimeout = <span class="integer">5000</span>;
    <span class="predefined-type">HttpURLConnection</span> connection;
    <span class="directive">protected</span> <span class="directive">static</span> <span class="predefined-type">Logger</span> log = <span class="keyword">new</span> <span class="predefined-type">Logger</span>(Worker.class);

    <span class="directive">private</span> <span class="type">void</span> init() {
        <span class="predefined-type">HttpURLConnection</span>.setFollowRedirects(<span class="predefined-constant">true</span>);
    }

    <span class="directive">public</span> HttpClientCore(<span class="type">int</span> connectionTimeout, <span class="type">int</span> requestTimeout, <span class="predefined-type">Hashtable</span> headers) {
        init();
        <span class="local-variable">this</span>.setRequestTimeout(requestTimeout);
        <span class="local-variable">this</span>.setConnectionTimeout(connectionTimeout);
        <span class="local-variable">this</span>._headers = headers;
    }

    <span class="directive">public</span> <span class="type">int</span> getRequestTimeout() {
        <span class="keyword">return</span> requestTimeout;
    }

    <span class="directive">public</span> <span class="type">void</span> setRequestTimeout(<span class="type">int</span> requestTimeout) {
        <span class="local-variable">this</span>.requestTimeout = requestTimeout;
    }

    <span class="directive">public</span> <span class="type">int</span> getConnectionTimeout() {
        <span class="keyword">return</span> connectionTimeout;
    }

    <span class="directive">public</span> <span class="type">void</span> setConnectionTimeout(<span class="type">int</span> connectionTimeout) {
        <span class="local-variable">this</span>.connectionTimeout = connectionTimeout;
    }

    <span class="directive">public</span> <span class="type">boolean</span> isRedirect(<span class="type">int</span> rc) {
        <span class="keyword">return</span> (rc == <span class="predefined-type">HttpURLConnection</span>.HTTP_MOVED_PERM
                || rc == <span class="predefined-type">HttpURLConnection</span>.HTTP_MOVED_TEMP || rc == <span class="predefined-type">HttpURLConnection</span>.HTTP_SEE_OTHER);
    }

    <span class="directive">public</span> <span class="type">boolean</span> checkResponse(<span class="type">int</span> rc) {
        <span class="keyword">return</span> (rc == <span class="predefined-type">HttpURLConnection</span>.HTTP_OK || isRedirect(rc));
    }

    <span class="directive">public</span> <span class="type">boolean</span> checkResponseSuccess(<span class="type">int</span> rc) {
        <span class="keyword">return</span> (rc == <span class="predefined-type">HttpURLConnection</span>.HTTP_OK);
    }

    <span class="directive">private</span> <span class="directive">static</span> <span class="predefined-type">String</span> readInput(<span class="predefined-type">InputStream</span> in) <span class="directive">throws</span> <span class="exception">IOException</span> {
        <span class="predefined-type">ByteArrayOutputStream</span> out = <span class="keyword">new</span> <span class="predefined-type">ByteArrayOutputStream</span>();
        <span class="type">byte</span> bytes<span class="type">[]</span> = <span class="keyword">new</span> <span class="type">byte</span>[<span class="integer">1024</span>];

        <span class="type">int</span> n = in.read(bytes);

        <span class="keyword">while</span> (n != -<span class="integer">1</span>) {
            out.write(bytes, <span class="integer">0</span>, n);
            n = in.read(bytes);
        }

        <span class="keyword">return</span> <span class="keyword">new</span> <span class="predefined-type">String</span>(out.toString());
    }

    <span class="directive">public</span> HttpResponse fetch(<span class="predefined-type">String</span> url) <span class="directive">throws</span> PubnubException, <span class="exception">SocketTimeoutException</span> {
        <span class="keyword">return</span> fetch(url, <span class="predefined-constant">null</span>);
    }
</pre></div>
</div>
 </figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bai Viet Dau Tien]]></title>
    <link href="http://hoangddt.net/vi/blog/2015/04/bai-viet-dau-tien/"/>
    <updated>2015-04-19T20:52:53+07:00</updated>
    <id>http://hoangddt.net/vi/blog/2015/04/bai-viet-dau-tien</id>
    <content type="html"><![CDATA[<p>Day la bai viet dau tien</p>
]]></content>
  </entry>
  
</feed>
